""" """
from pathlib import Path
import numpy as np
from datetime import datetime
from qcrew.control import Stagehand
from qcrew.control.pulses import IQPulse

from qcrew.control import professor as prof
from qcrew.measure.experiment import Experiment
from qm import qua

from qutip import destroy, basis, coherent
from pygrape import *

DRIVE = 1e-3


def make_cav_cal_setup(c_dim=15, alpha=-7.5e-6, nbar=5, mask=[1, 1]):
    a, ad = destroy(c_dim), destroy(c_dim).dag()

    if alpha == 0:
        H0 = a.full() * 0
    else:
        H0 = 0.5 * alpha * a.dag() * a.dag() * a * a

    I = a + ad
    Q = 1j * (a - ad)
    drives = [I.full() * mask[0], Q.full() * mask[1]]
    Hcs = 2 * pi * DRIVE * np.array(drives)

    in_states = [
        basis(c_dim, 0),
    ]
    out_states = [
        coherent(c_dim, np.sqrt(nbar)),
    ]

    return StateTransferSetup(2 * pi * H0, Hcs, in_states, out_states, gauge_ops=None)


class GrapeCavityDisplacement(Experiment):

    name = "GrapeCavityDisplacement"

    def __init__(self, oct_op, qubit_op, fit_fn=None, **other_params):

        self.fit_fn = fit_fn
        self.oct_op = oct_op
        self.qubit_op = qubit_op

        super().__init__(**other_params)  # Passes other parameters to parent

    def QUA_play_pulse_sequence(self):
        """
        Defines pulse sequence to be played inside the experiment loop
        """
        qubit, rr, cav, cav_drive, rr_drive = self.modes  # get the modes

        # generate state
        cav.play(self.oct_op, ampx=self.x)
        qua.align(cav.name, qubit.name)  # align all modes
        qubit.play(self.qubit_op)  # play qubit pulse
        qua.align(qubit.name, rr.name)  # align all modes
        rr.measure((self.I, self.Q))  # measure transmitted signal

        qua.align(cav.name, qubit.name, rr.name, cav_drive.name, rr_drive.name)
        cav_drive.play("constant_cos", duration=200e3, ampx=1.6)
        rr_drive.play("constant_cos", duration=200e3, ampx=1.4)
        qua.wait(int(self.wait_time // 4), cav.name)

        if self.single_shot:  # assign state to G or E
            qua.assign(
                self.state, qua.Cast.to_fixed(self.I < rr.readout_pulse.threshold)
            )
        self.QUA_stream_results()  # stream variables (I, Q, x, etc)


# -------------------------------- Execution -----------------------------------

if __name__ == "__main__":

    date = datetime.now().strftime("%Y%m%d")
    # generate pulse with run_grape if needed
    outdir = Path(
        f"C:/Users/qcrew/Desktop/qcrew/qcrew/config/oct_pulses/cavity_dis/{date}"
    )
    outdir.mkdir(exist_ok=True, parents=True)
    pnames = ["cavI", "cavQ"]

    generate_pulse = False
    play_pulse = True

    if generate_pulse:
        plen = 80
        kerr = -10e-6
        nbar = 1

        n_ss = 1  # simulation subsample
        dt = 2  # FPGA in 2 mode operation is 500 MHz
        num_pts = plen / dt  # number of points

        drive_mask = [1, 1]

        setup = make_cav_cal_setup(c_dim=15, alpha=kerr, nbar=nbar, mask=drive_mask)

        init_ctrls = 0.25 * random_waves(n_ctrls=2, plen=plen)

        reporter_fns = [
            print_costs(),
            save_waves(pnames, 20),
            plot_waves(pnames, 10),
            plot_fidelity(4),
        ]

        penalty_fns = [
            make_amp_cost(1e-4, 0.5),
            make_deriv_cost(2e-5, 0.5),
            make_l1_penalty(1e-5, 500),  # 1e-5, 500
            make_lin_deriv_cost(1e-4),
        ]

        results = run_grape(
            init_ctrls,
            setup,
            reporter_fns=reporter_fns,
            penalty_fns=penalty_fns,
            outdir=outdir,
            maxiter=500,
            n_ss=n_ss,
            dt=dt,
            term_fid=0.999,
            save_data=10,
        )

    # loading pulse generated by run_grape

    index = 26
    file = outdir / f"{index}/waves.npz"
    npzfile = np.load(file)
    iwave, qwave = npzfile[pnames[0]], npzfile[pnames[1]]

    scaling_factor = 20
    iwave *= scaling_factor
    qwave *= scaling_factor

    if play_pulse:

        with Stagehand() as stage:
            qubit = stage.QUBIT
            cav = stage.CAV
            cav.operations = {"oct_pulse": IQPulse(i_wave=iwave, q_wave=qwave)}

            amp_start = 0
            amp_stop = 1.5
            amp_step = 0.05

            parameters = {
                "modes": [qubit, stage.RR, cav, stage.CAV_DRIVE, stage.RR_DRIVE],
                "reps": 1000,
                "wait_time": 100000,
                "fetch_period": 1,  # time between data fetching rounds in sec
                "x_sweep": (amp_start, amp_stop + amp_step / 2, amp_step),
                "oct_op": "oct_pulse",
                "fit_fn": "displacement_cal",
                "single_shot": True,
                "qubit_op": "pi_selective_1",
            }

            plot_parameters = {
                "xlabel": "Amplitude scaling factor",
                "ylabel": "Signal (AU)",
            }

            experiment = GrapeCavityDisplacement(**parameters)
            experiment.setup_plot(**plot_parameters)

            # use this to play pulse with datasaving and plotting
            prof.run_with_stage(experiment, stage)

            # use this to play pulse without datasaving and plotting
            # qm_job = stage.QM.execute(experiment.QUA_sequence())

            cav.remove_operation("oct_pulse")
